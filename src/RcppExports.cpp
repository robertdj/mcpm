// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// minimum_cost_perfect_matching
Rcpp::List minimum_cost_perfect_matching(int nvertices, int nedges, Rcpp::DataFrame edges);
RcppExport SEXP _mcpm_minimum_cost_perfect_matching(SEXP nverticesSEXP, SEXP nedgesSEXP, SEXP edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nvertices(nverticesSEXP);
    Rcpp::traits::input_parameter< int >::type nedges(nedgesSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type edges(edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(minimum_cost_perfect_matching(nvertices, nedges, edges));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mcpm_minimum_cost_perfect_matching", (DL_FUNC) &_mcpm_minimum_cost_perfect_matching, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_mcpm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
